version: '3.9'

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  chroma_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

services:
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-200h}'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.parameterized.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agent-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - agent-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: agent-chroma
    ports:
      - "${CHROMA_PORT:-8005}:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15-community
    container_name: agent-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-password}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - agent-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "${NEO4J_PASSWORD:-password}", "RETURN 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}

  # Override services to expose metrics endpoints
  api:
    environment:
      - PYTHONPATH=/app
      - DEPLOYMENT_PROFILE=${DEPLOYMENT_PROFILE:-full}
      - ASR_SERVICE_URL=${ASR_SERVICE_URL:-http://asr:8001}
      - LLM_SERVICE_URL=${LLM_SERVICE_URL:-http://llm:8002}
      - TTS_SERVICE_URL=${TTS_SERVICE_URL:-http://tts:8003}
      - SARDAUKAR_TRANSLATOR_URL=${SARDAUKAR_TRANSLATOR_URL:-http://sardaukar-translator:8004}
      - SARDAUKAR_ENABLED=${SARDAUKAR_ENABLED:-false}
      - CHROMA_HOST=${CHROMA_HOST:-chroma}
      - CHROMA_PORT=${CHROMA_PORT:-8000}
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_MULTIPROC_DIR=/tmp
    depends_on:
      - asr
      - llm
      - tts
      - sardaukar-translator
      - chroma
      - neo4j

  asr:
    environment:
      - PYTHONPATH=/app
      - WHISPER_MODEL=${WHISPER_MODEL:-base}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_MULTIPROC_DIR=/tmp

  llm:
    environment:
      - PYTHONPATH=/app
      - MODEL_NAME=${LLM_MODEL_NAME:-llama3}
      - MODEL_PATH=/app/models
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_MULTIPROC_DIR=/tmp

  tts:
    environment:
      - PYTHONPATH=/app
      - PIPER_MODEL=${PIPER_MODEL:-en_US-lessac-medium}
      - SARDAUKAR_TRANSLATOR_URL=${SARDAUKAR_TRANSLATOR_URL:-http://sardaukar-translator:8004}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_MULTIPROC_DIR=/tmp